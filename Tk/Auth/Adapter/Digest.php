<?php
/*
 * @author Michael Mifsud <info@tropotek.com>
 * @link http://www.tropotek.com/
 * @license Copyright 2007 Michael Mifsud
 */
namespace Tk\Auth\Adapter;
use Tk\Auth\Result;

/**
 * Digest Authentication adapter
 *
 * This object uses a .htpasswd file or similar generated by the apache tools.
 *
 *
 * @link https://en.wikipedia.org/wiki/Digest_access_authentication
 */
class Digest extends Iface
{
    /**
     * @var string
     */
    protected $realm = '';

    /**
     * Full path to the digest password file
     * @var string
     */
    protected $digestFile = '';


    /**
     * Constructor
     *
     * @param  string     $digestFile
     * @param  string     $realm
     * @param  string     $username The username of the account being authenticated
     * @param  string     $password The password of the account being authenticated
     * @throws \Tk\Auth\Exception
     */
    public function __construct($digestFile, $realm, $username = null, $password = null)
    {
        parent::__construct($username, $password);
        if (!is_file($digestFile)) {
            throw new \Tk\Auth\Exception('Cannot locate digest file: ' . $digestFile);
        }
        $this->digestFile = $digestFile;
        $this->realm = $realm;
    }

    /**
     * @return string
     */
    public function getDigestFile()
    {
        return $this->digestFile;
    }

    /**
     * Returns the realm option value or null if it has not yet been set
     *
     * @return string
     */
    public function getRealm()
    {
        return $this->realm;
    }


    /**
     * Defined by Tk\Auth\Adapter\Iface
     *
     * @throws \Tk\Auth\Exception
     * @return \Tk\Auth\Result
     */
    public function authenticate()
    {
        if (false === ($fileHandle = @fopen($this->getDigestFile(), 'r'))) {
            return new Result(Result::FAILURE, $this->getUsername(), 'Cannot open digest file.');
        }
        $id = $this->getUsername() . ':' . $this->getRealm();
        $idLength = strlen($id);
        while ($line = trim(fgets($fileHandle))) {
            if (substr($line, 0, $idLength) === $id) {
                if ( $this->_secureStringCompare(substr($line, -32), \Tk\Auth\Auth::hash(sprintf('%s:%s:%s', $this->getRealm(), $this->getPassword()), 'md5')) ) {
                    return new Result(Result::SUCCESS, $this->getUsername());
                } else {
                    return new Result(Result::FAILURE_CREDENTIAL_INVALID, $this->getUsername(), 'Username or Password incorrect');
                }
            }
        }
        return new Result(Result::FAILURE_IDENTITY_NOT_FOUND, $this->getUsername(), 'Invalid user credentials.');
    }

    /**
     * Securely compare two strings for equality while avoided C level memcmp()
     * optimisations capable of leaking timing information useful to an attacker
     * attempting to iteratively guess the unknown string (e.g. password) being
     * compared against.
     *
     * @param string $a
     * @param string $b
     * @return bool
     */
    protected function _secureStringCompare($a, $b)
    {
        if (strlen($a) !== strlen($b)) {
            return false;
        }
        $result = 0;
        for ($i = 0; $i < strlen($a); $i++) {
            $result |= ord($a[$i]) ^ ord($b[$i]);
        }
        return $result == 0;
    }
}

